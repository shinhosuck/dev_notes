PART1. DJANGO ORM(object-relational mapper):
    Definition: converting data between incomaptible
                type systems using object-oriented
                programming languages.
                --takes python object
                and creates relational
                mapping across the database(sql).

PART2. DJANGO |(or staement) QUERY:
    from orm.models import Student
    from django.db.models import Q

    Data from SQL:
        students = Student.objects.all()
        print(students.query)
        print(connection.queries)
    Example:
        students = Student.objects.filter(first_name_startswith="Eric") |
            Student.objects.filter(first_name__startswith="Jack") |
            Student.objects.filter(first_nam__startswith="James")

        *simpler way:
        students = Student.object.filter(Q(first_name_startswith="Eric") |
            Q(first_name__startswith="Jack") |
            Q(first_name__startswith="James"))

        *extra:
            ~(not statement)
            __(dunther)

PART3. &(and) query:
    from orm.models import Student
    from django.db.models import Q
    from django.db import connection

    students = Student.objects.filter(Q(first_name__startswith='J') & Q(age=20))
    *what this is saying is that the first names/name starts "J" and ages/age is 20.
    *the first statement and the last statement have to be TRUE, or else, it will give empty list.

    print(connection.queries)
    print(students.query)

PART4. UNION QUERIES:
    from orm.models import Student, Teacher

    IMPORTANT TOPICS:
        value_list()-gives LIST/[], value()-gives DICTIONARY/{}, union()

    IMPORTANT RULE TO REMEMBER:
        students_and_teachers = Student.objects.all().value_list('last_name').union(Teacher.objects.all().value_list('last_name'))
        *same 2 last name will not show, only shows one name-last name "Doe" and "Doe", only one "Doe" will show.
        *must be same data types and fields.

PART5. NOT QUERY:
    *exclude()
    *~Q()-not
    Django logical statements:
        gt = >
        gte = >=
        lt = <
        lte = <=
    Note: when using django logical statements,
        need to use DUNDER(__, double-underscore) infront of the statement.

PART6. FIELD SELECTION AND OUTPUT:
    *only()
    students = Student.objects.filter(class_room=2).only('first_name')
    -for some reason only() does not work.

PART7. RAW QUERIES:
    student = Student.objects.raw('SELECT * FROM orm_student WHERE age=25')

PART8. CUSTOM SQL:
    *needs "connection" from django.db import connection
    *cursor = connection.cursor()
    *cursor.execute('SELECT first_name,last_name, age FROM orm_student WHERE age=25')
    *data = cursor.fetchone() or cursor.fetchall()

    *CREATE PYTHON DICTIONARY:
        def cutom_sql(request):
            cursor = connection.cursor()
            cursor.execute('SELECT first_name, last_name, age, class_room WHERE orm_student FROM age=25')
            data = cursor.fetchall()

            new_list = []
            for d in data:
                f_name = d[0]
                l_name = d[1]
                a = d[2]
                cl = d[3]
                new_list.append(dict(first_name=f_name, last_name=l_name, age=a, classroom=cl))

            context = {
                'new_list': new_list
            }
            return render(request, 'orm/custom_sql.html', context)



    *DEFAULT DJANGO WAY:
        def dictfetchall(cursor):
            desc = cursor.description
            return [
                dict(zip([col[0] for col in desc], row))
                for row in cursor.fetchall()
            ]


        def cutom_sql(request):
            cursor = connection.cursor()
            cursor.execute('SELECT first_name, last_name, age, class_room WHERE orm_student FROM age=25')
            dictfetchall_call = dictfetchall(cursor)
            context = {
                'dictfetchall': dictfetchall
            }
            return render(request, 'orm/custom_sql.html', context)
